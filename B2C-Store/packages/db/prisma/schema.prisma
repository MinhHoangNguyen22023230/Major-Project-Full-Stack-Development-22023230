// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  username       String    @unique
  email          String    @unique
  hashedPassword String
  cart           Cart?
  order          Order[]
  address        Address[]
  wishList       WishList?
  review         Review[]
  imgUrl         String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Address {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  address String
  city    String
  state   String
  country String
  zipCode String
}

model Product {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String         @unique
  price        Float
  description  String
  imageUrl     String
  categoryId   String         @db.ObjectId
  brandId      String         @db.ObjectId
  category     Category       @relation(fields: [categoryId], references: [id])
  brand        Brand          @relation(fields: [brandId], references: [id])
  wishListItem WishListItem[]
  orderItem    OrderItem[]
  cartItem     CartItem[]
  releaseDate  DateTime?
  stock        Int
  rating       Float?
  reviews      Review[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String
  products    Product[]
}

model Brand {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  products    Product[]
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  cartItem  CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  orderItem OrderItem[]
  status    String      @default("pending")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

model WishList {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  userId       String         @unique @db.ObjectId
  user         User           @relation(fields: [userId], references: [id])
  wishListItem WishListItem[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model WishListItem {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  productId  String    @db.ObjectId
  product    Product   @relation(fields: [productId], references: [id])
  WishList   WishList? @relation(fields: [wishListId], references: [id])
  wishListId String?   @db.ObjectId
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int?
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
