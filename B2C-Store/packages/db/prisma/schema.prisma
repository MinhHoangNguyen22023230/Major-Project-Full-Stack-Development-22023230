// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  username       String    @unique
  email          String    @unique
  hashedPassword String
  cart           Cart?
  orders         Order[]
  addresses      Address[]
  wishList       WishList?
  reviews        Review[]
  imgUrl         String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Address {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  userId  String  @db.ObjectId
  user    User    @relation(fields: [userId], references: [id])
  address String
  city    String
  state   String
  country String
  zipCode String
  default Boolean @default(false)
}

model Product {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String         @unique
  price         Float
  salePrice     Float?
  description   String
  imageUrl      String
  categoryId    String         @db.ObjectId
  brandId       String         @db.ObjectId
  category      Category       @relation(fields: [categoryId], references: [id])
  brand         Brand          @relation(fields: [brandId], references: [id])
  wishListItems WishListItem[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  releaseDate   DateTime?
  stock         Int            @default(0)
  rating        Float?
  reviews       Review[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  imageUrl    String?
  products    Product[]
}

model Brand {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  products    Product[]
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Cart {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String     @unique @db.ObjectId
  user       User       @relation(fields: [userId], references: [id])
  totalPrice Float?
  itemsCount Int        @default(0)
  cartItems  CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model CartItem {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId     String  @db.ObjectId
  cart       Cart    @relation(fields: [cartId], references: [id])
  totalPrice Float
  productId  String  @db.ObjectId
  product    Product @relation(fields: [productId], references: [id])
  quantity   Int
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String      @db.ObjectId
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  itemsCount Int         @default(0)
  totalPrice Float?
  status     String      @default("pending")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String  @db.ObjectId
  totalPrice Float
  order      Order   @relation(fields: [orderId], references: [id])
  productId  String  @db.ObjectId
  product    Product @relation(fields: [productId], references: [id])
  quantity   Int
}

model WishList {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String         @unique @db.ObjectId
  user          User           @relation(fields: [userId], references: [id])
  wishListItems WishListItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model WishListItem {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  productId  String    @db.ObjectId
  product    Product   @relation(fields: [productId], references: [id])
  WishList   WishList? @relation(fields: [wishListId], references: [id])
  wishListId String?   @db.ObjectId
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int?
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  username       String   @unique
  email          String   @unique
  imageUrl       String?
  hashedPassword String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
